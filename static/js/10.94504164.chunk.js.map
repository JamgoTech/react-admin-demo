{"version":3,"sources":["../FakeRest/webpack/universalModuleDefinition","../FakeRest/src/Collection.js","../FakeRest/src/FakeRest.js","../FakeRest/src/FetchServer.js","../FakeRest/src/Server.js","../FakeRest/src/Single.js","../FakeRest/src/parseQueryString.js","../FakeRest/webpack/bootstrap","../FakeRest/webpack/startup","../webpack:/FakeRest/webpack/runtime/define property getters","../webpack:/FakeRest/webpack/runtime/hasOwnProperty shorthand","../webpack:/FakeRest/webpack/runtime/make namespace object"],"names":["self","module","exports","Collection","items","identifierName","Array","isArray","Error","this","sequence","server","name","map","addOne","bind","e","resourceName","referenceName","slice","item","otherCollection","t","collections","getAll","filter","indexOf","i","pluralResourceName","getOne","embed","resourceEmbedders","endsWith","_oneToManyEmbedder","_manyToOneEmbedder","reduce","itemWithEmbeds","embedder","query","length","Object","filterFunctions","keys","key","regex","RegExp","q","itemKey","match","value","realKey","replace","predicate","array","itemValue","v","acc","selected","filterFunction","sort","a","b","direction","toLowerCase","range","assign","_itemEmbedder","identifier","findIndex","index","getIndex","Math","max","push","splice","Server","FetchServer","Single","request","opts","req","Request","queryString","decodeURIComponent","url","params","parseQueryString","text","then","requestBody","requestJson","JSON","parse","requestInterceptors","previous","current","response","responseInterceptors","log","headers","Headers","loggingEnabled","console","group","groupCollapsed","method","groupEnd","status","body","decode","batchUrl","batch","getSingleNames","baseUrl","getOnly","error","reponse","respond","updateOnly","getCollectionNames","matches","defaultQuery","id","updateOne","removeOne","count","getCount","first","last","min","newResource","newResourceURI","getCollection","singles","data","addCollection","addSingle","warn","collection","setServer","setName","single","interceptor","hasOwnProperty","json","stringify","requestHeaders","handle","jsonResponse","requestName","subResponse","sub","code","headerName","contentRange","Location","obj","queryObject","split","queryElement","trim","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","d","definition","o","defineProperty","enumerable","get","prop","prototype","call","r","Symbol","toStringTag"],"mappings":"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","file":"static/js/10.94504164.chunk.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"FakeRest\"] = factory();\n\telse\n\t\troot[\"FakeRest\"] = factory();\n})(self, function() {\nreturn ","const every = (array, predicate) =>\n    array.reduce((acc, value) => acc && predicate(value), true);\n\nconst some = (array, predicate) =>\n    array.reduce((acc, value) => acc || predicate(value), false);\n\nfunction filterItems(items, filter) {\n    if (typeof filter === 'function') {\n        return items.filter(filter);\n    }\n    if (filter instanceof Object) {\n        // turn filter properties to functions\n        var filterFunctions = Object.keys(filter).map(key => {\n            if (key === 'q') {\n                let regex = new RegExp(filter.q, 'i');\n                // full-text filter\n                return item => {\n                    for (let itemKey in item) {\n                        if (item[itemKey] && item[itemKey].match && item[itemKey].match(regex) !== null) return true;\n                    }\n                    return false;\n                };\n            }\n            let value = filter[key];\n            if (key.indexOf('_lte') !== -1) {\n                // less than or equal\n                let realKey = key.replace(/(_lte)$/, '');\n                return item => item[realKey] <= value;\n            }\n            if (key.indexOf('_gte') !== -1) {\n                // less than or equal\n                let realKey = key.replace(/(_gte)$/, '');\n                return item => item[realKey] >= value;\n            }\n            if (key.indexOf('_lt') !== -1) {\n                // less than or equal\n                let realKey = key.replace(/(_lt)$/, '');\n                return item => item[realKey] < value;\n            }\n            if (key.indexOf('_gt') !== -1) {\n                // less than or equal\n                let realKey = key.replace(/(_gt)$/, '');\n                return item => item[realKey] > value;\n            }\n            if (Array.isArray(value)) {\n                return item => {\n                    if (Array.isArray(item[key])) {\n                        // array filter and array item value: where all items in values\n                        return every(\n                            value,\n                            v => some(item[key], itemValue => itemValue == v)\n                        );\n                    }\n                    // where item in values\n                    return value.filter(v => v == item[key]).length > 0;\n                }\n            }\n            return item => {\n                if (Array.isArray(item[key]) && typeof value == 'string') {\n                    // simple filter but array item value: where value in item\n                    return item[key].indexOf(value) !== -1;\n                }\n                if (typeof item[key] == 'boolean' && typeof value == 'string') {\n                    // simple filter but boolean item value: boolean where\n                    return item[key] == (value === 'true' ? true : false);\n                }\n                // simple filter\n                return item[key] == value;\n            };\n        });\n        // only the items matching all filters functions are in (AND logic)\n        return items.filter(item =>\n            filterFunctions.reduce((selected, filterFunction) => selected && filterFunction(item), true)\n        );\n    }\n    throw new Error('Unsupported filter type');\n}\n\nfunction sortItems(items, sort) {\n    if (typeof sort === 'function') {\n        return items.sort(sort);\n    }\n    if (typeof sort === 'string') {\n        return items.sort(function(a, b) {\n          if (a[sort] > b[sort]) {\n            return 1;\n          }\n          if (a[sort] < b[sort]) {\n            return -1;\n          }\n          return 0;\n        });\n    }\n    if (Array.isArray(sort)) {\n        let key = sort[0];\n        let direction = sort[1].toLowerCase() == 'asc' ? 1 : -1;\n        return items.sort(function(a, b) {\n          if (a[key] > b[key]) {\n            return direction;\n          }\n          if (a[key] < b[key]) {\n            return -1 * direction ;\n          }\n          return 0;\n        });\n    }\n    throw new Error('Unsupported sort type');\n}\n\nfunction rangeItems(items, range) {\n    if (Array.isArray(range)) {\n        return items.slice(range[0], range[1] !== undefined ? range[1] + 1 : undefined);\n    }\n    throw new Error('Unsupported range type');\n}\n\nexport class Collection {\n\n    constructor(items=[], identifierName='id') {\n        if (!Array.isArray(items)) {\n            throw new Error('Can\\'t initialize a Collection with anything else than an array of items');\n        }\n        this.sequence = 0; // id of the next item\n        this.identifierName = identifierName;\n        this.items = [];\n        this.server = null;\n        this.name = null;\n        items.map(this.addOne.bind(this));\n    }\n\n    /**\n     * A Collection may need to access other collections (e.g. for embedding references)\n     * This is done through a reference to the parent server.\n     */\n    setServer(server) {\n        this.server = server;\n    }\n\n    setName(name) {\n        this.name = name;\n    }\n\n    /**\n     * Get a one to many embedder function for a given resource name\n     *\n     * @example embed posts for an author\n     *\n     *     authorsCollection._oneToManyEmbedder('posts')\n     *\n     * @returns Function item => item\n     */\n    _oneToManyEmbedder(resourceName) {\n        const singularResourceName = this.name.slice(0,-1);\n        const referenceName = singularResourceName + '_id';\n        return (item) => {\n            const otherCollection = this.server.collections[resourceName];\n            if (!otherCollection) throw new Error(`Can't embed a non-existing collection ${resourceName}`);\n            if (Array.isArray(item[resourceName])) {\n                // the many to one relationship is carried by an array of ids, e.g. { posts: [1, 2] } in authors\n                item[resourceName] = otherCollection.getAll({\n                    filter: i => item[resourceName].indexOf(i[otherCollection.identifierName]) !== -1\n                });\n            } else {\n                // the many to one relationship is carried by references in the related collection, e.g. { author_id: 1 } in posts\n                item[resourceName] = otherCollection.getAll({\n                    filter: i => i[referenceName] == item[this.identifierName]\n                });\n            }\n            return item;\n        };\n    }\n\n    /**\n     * Get a many to one embedder function for a given resource name\n     *\n     * @example embed author for a post\n     *\n     *     postsCollection._manyToOneEmbedder('author')\n     *\n     * @returns Function item => item\n     */\n    _manyToOneEmbedder(resourceName) {\n        const pluralResourceName = resourceName + 's';\n        const referenceName = resourceName + '_id';\n        return (item) => {\n            const otherCollection = this.server.collections[pluralResourceName];\n            if (!otherCollection) throw new Error(`Can't embed a non-existing collection ${resourceName}`);\n            try {\n                item[resourceName] = otherCollection.getOne(item[referenceName]);\n            } catch (e) {\n                // resource doesn't exist in the related collection - do not embed\n            }\n            return item;\n        };\n    }\n\n    /**\n     * @param String[] An array of resource names, e.g. ['books', 'country']\n     * @returns Function item => item\n     */\n    _itemEmbedder(embed) {\n        const resourceNames = Array.isArray(embed) ? embed : [embed];\n        const resourceEmbedders = resourceNames.map(resourceName =>\n            resourceName.endsWith('s') ? this._oneToManyEmbedder(resourceName) : this._manyToOneEmbedder(resourceName)\n        );\n        return item => resourceEmbedders.reduce((itemWithEmbeds, embedder) => embedder(itemWithEmbeds), item);\n    }\n\n    getCount(query) {\n        return this.getAll(query).length;\n    }\n\n    getAll(query) {\n        var items = this.items.slice(0); // clone the array to avoid updating the core one\n        if (query) {\n            if (query.filter) {\n                items = filterItems(items, query.filter);\n            }\n            if (query.sort) {\n                items = sortItems(items, query.sort);\n            }\n            if (query.range) {\n                items = rangeItems(items, query.range);\n            }\n            items = items.map(item => Object.assign({}, item)) // clone item to avoid returning the original\n            if (query.embed && this.server) {\n                items = items.map(this._itemEmbedder(query.embed)); // embed reference\n            }\n        }\n        return items;\n    }\n\n    getIndex(identifier) {\n        return this.items.findIndex(item => item[this.identifierName] == identifier);\n    }\n\n    getOne(identifier, query) {\n        let index = this.getIndex(identifier);\n        if (index === -1) {\n            throw new Error(`No item with identifier ${ identifier }`);\n        }\n        let item = this.items[index];\n        item = Object.assign({}, item); // clone item to avoid returning the original\n        if (query && query.embed && this.server) {\n            item = this._itemEmbedder(query.embed)(item); // embed reference\n        }\n        return item;\n    }\n\n    addOne(item) {\n        var identifier = item[this.identifierName];\n        if (identifier !== undefined) {\n            if (this.getIndex(identifier) !== -1) {\n                throw new Error(`An item with the identifier ${ identifier } already exists`);\n            } else {\n                this.sequence = Math.max(this.sequence, identifier) + 1;\n            }\n        } else {\n            item[this.identifierName] = this.sequence++;\n        }\n        this.items.push(item);\n        return Object.assign({}, item); // clone item to avoid returning the original;\n    }\n\n    updateOne(identifier, item) {\n        let index = this.getIndex(identifier);\n        if (index === -1) {\n            throw new Error(`No item with identifier ${ identifier }`);\n        }\n        for (let key in item) {\n            this.items[index][key] = item[key];\n        }\n        return Object.assign({}, this.items[index]); // clone item to avoid returning the original\n    }\n\n    removeOne(identifier) {\n        let index = this.getIndex(identifier);\n        if (index === -1) {\n            throw new Error(`No item with identifier ${ identifier }`);\n        }\n        var item = this.items[index];\n        this.items.splice(index, 1);\n        if (identifier == (this.sequence - 1)) {\n            this.sequence--;\n        }\n        return item;\n    }\n}\n","import { Server } from './Server';\nimport { FetchServer } from './FetchServer';\nimport { Collection } from './Collection';\nimport { Single } from './Single';\n\nexport { Server, FetchServer, Collection, Single };\nexport default { Server, FetchServer, Collection, Single };\n","import { Server } from './Server';\nimport { parseQueryString } from './parseQueryString';\n\nexport class FetchServer extends Server {\n    decode(request, opts) {\n        const req = (typeof request === 'string') ? new Request(request, opts) : request;\n        req.queryString = decodeURIComponent(req.url.slice(req.url.indexOf('?') + 1));\n        req.params = parseQueryString(req.queryString);\n        return req.text()\n            .then(text => {\n                req.requestBody = text\n                try {\n                    req.requestJson = JSON.parse(text)\n                } catch(e) {\n                    // not JSON, no big deal\n                }\n            })\n            .then(() => this.requestInterceptors.reduce((previous, current) => current(previous), req))\n    }\n\n    respond(response, request) {\n        response = this.responseInterceptors.reduce(function(previous, current) {\n            return current(previous, request);\n        }, response);\n        this.log(request, response);\n        response.headers = new Headers(response.headers)\n\n        return response;\n    }\n\n    log(request, response) {\n        if (!this.loggingEnabled) return;\n        if (console.group) {\n            // Better logging in Chrome\n            console.groupCollapsed(request.method, request.url, '(FakeRest)');\n            console.group('request');\n            console.log(request.method, request.url);\n            console.log('headers', request.headers);\n            console.log('body   ', request.requestBody);\n            console.groupEnd();\n            console.group('response', response.status);\n            console.log('headers', response.headers);\n            console.log('body   ', response.body);\n            console.groupEnd();\n            console.groupEnd();\n        } else {\n            console.log('FakeRest request ', request.method, request.url, 'headers', request.headers, 'body', request.requestBody);\n            console.log('FakeRest response', response.status, 'headers', response.headers, 'body', response.body);\n        }\n    }\n\n    batch(request) {\n        throw new Error('not implemented');\n    }\n\n    /**\n     * @param {Request} fetch request\n     * @param {Object} options\n     *\n     */\n    handle(req, opts) {\n        return this.decode(req, opts)\n            .then(request => {\n                const response = {\n                    headers: {'Content-Type': 'application/json' },\n                    status: 200,\n                };\n\n                // handle batch request\n                if (this.batchUrl && this.batchUrl === request.url && request.method === 'POST') {\n                    return this.batch(request);\n                }\n\n                // Handle Single Objects\n                for (let name of this.getSingleNames()) {\n                    let matches = request.url.match(new RegExp('^' + this.baseUrl + '\\\\/(' + name + ')(\\\\/?.*)?$' ));\n                    if (!matches) continue;\n\n                    if (request.method == 'GET') {\n                        try {\n                            response.body = this.getOnly(name);\n                        } catch (error) {\n                            reponse.status = 404;\n                        }\n                        return this.respond(response, request);\n                    }\n                    if (request.method == 'PUT') {\n                        try {\n                            response.body = this.updateOnly(name, request.requestJson);\n                        } catch (error) {\n                            reponse.status = 404;\n                        }\n                        return this.respond(response, request);\n                    }\n                    if (request.method == 'PATCH') {\n                       try {\n                            response.body = this.updateOnly(name, request.requestJson);\n                        } catch (error) {\n                            reponse.status = 404;\n                        }\n                        return this.respond(response, request);\n                    }\n                }\n\n                // handle collections\n                for (let name of this.getCollectionNames()) {\n                    let matches = request.url.match(new RegExp('^' + this.baseUrl + '\\\\/(' + name + ')(\\\\/(\\\\d+))?(\\\\?.*)?$' ));\n                    if (!matches) continue;\n                    let params = Object.assign({}, this.defaultQuery(name), request.params);\n                    if (!matches[2]) {\n                        if (request.method == 'GET') {\n                            let count = this.getCount(name, params.filter ? { filter: params.filter } : {});\n                            if (count > 0) {\n                                let items = this.getAll(name, params);\n                                let first = params.range ? params.range[0] : 0;\n                                let last = params.range ? Math.min(items.length - 1 + first, params.range[1]) : (items.length - 1);\n                                response.body = items;\n                                response.headers['Content-Range'] = `items ${first}-${last}/${count}`;\n                                response.status = (items.length == count) ? 200 : 206;\n                            } else {\n                                response.body = [];\n                                response.headers['Content-Range'] = 'items */0';\n                            }\n                            return this.respond(response, request);\n                        }\n                        if (request.method == 'POST') {\n                            let newResource = this.addOne(name, request.requestJson);\n                            let newResourceURI = this.baseUrl + '/' + name + '/' + newResource[this.getCollection(name).identifierName];\n                            response.body = newResource;\n                            response.headers['Location'] = newResourceURI;\n                            response.status = 201;\n                            return this.respond(response, request);\n                        }\n                    } else {\n                        let id = matches[3];\n                        if (request.method == 'GET') {\n                            try {\n                                response.body = this.getOne(name, id, params);\n                            } catch (error) {\n                                response.status = 404;\n                            }\n                            return this.respond(response, request);\n                        }\n                        if (request.method == 'PUT') {\n                            try {\n                                response.body = this.updateOne(name, id, request.requestJson);\n                            } catch (error) {\n                                response.status = 404;\n                            }\n                            return this.respond(response, request);\n                        }\n                        if (request.method == 'PATCH') {\n                            try {\n                                response.body = this.updateOne(name, id, request.requestJson);\n                            } catch (error) {\n                                response.status = 404;\n                            }\n                            return this.respond(response, request);\n                        }\n                        if (request.method == 'DELETE') {\n                            try {\n                                response.body = this.removeOne(name, id);\n                            } catch (error) {\n                                response.status = 404;\n                            }\n                            return this.respond(response, request);\n                        }\n                    }\n                }\n                return this.respond(response, request);\n            });\n    }\n}\n","import { Collection } from './Collection';\nimport { Single } from './Single';\nimport { parseQueryString } from './parseQueryString';\n\nexport class Server {\n    constructor(baseUrl='') {\n        this.baseUrl = baseUrl;\n        this.loggingEnabled = false;\n        this.defaultQuery = () => {};\n        this.batchUrl = null;\n        this.collections = {};\n        this.singles = {};\n        this.requestInterceptors = [];\n        this.responseInterceptors = [];\n    }\n\n    /**\n     * Shortcut for adding several collections if identifierName is always 'id'\n     */\n    init(data) {\n        for (let name in data) {\n            if (Array.isArray(data[name])) {\n                this.addCollection(name, new Collection(data[name], 'id'));\n            } else {\n                this.addSingle(name, new Single(data[name]));\n            }\n        }\n    }\n\n    toggleLogging() {\n        this.loggingEnabled = !this.loggingEnabled;\n    }\n\n    /**\n     * @param Function ResourceName => object\n     */\n    setDefaultQuery(query) {\n        this.defaultQuery = query;\n    }\n\n    setBatchUrl(batchUrl) {\n        this.batchUrl = batchUrl;\n    }\n\n    /**\n     * @deprecated use setBatchUrl instead\n     */\n    setBatch(url) {\n        console.warn('Server.setBatch() is deprecated, use Server.setBatchUrl() instead');\n        this.batchUrl = url;\n    }\n\n    addCollection(name, collection) {\n        this.collections[name] = collection;\n        collection.setServer(this);\n        collection.setName(name);\n    }\n\n    getCollection(name) {\n        return this.collections[name];\n    }\n\n    getCollectionNames() {\n        return Object.keys(this.collections);\n    }\n\n    addSingle(name, single) {\n        this.singles[name] = single;\n        single.setServer(this);\n        single.setName(name);\n    }\n\n    getSingle(name) {\n        return this.singles[name];\n    }\n\n    getSingleNames() {\n        return Object.keys(this.singles);\n    }\n\n    addRequestInterceptor(interceptor) {\n        this.requestInterceptors.push(interceptor);\n    }\n\n    addResponseInterceptor(interceptor) {\n        this.responseInterceptors.push(interceptor);\n    }\n\n    /**\n     * @param {string} name\n     * @param {string} params As decoded from the query string, e.g. { sort: \"name\", filter: {enabled:true}, slice: [10, 20] }\n     */\n    getCount(name, params) {\n        return this.collections[name].getCount(params);\n    }\n\n    /**\n     * @param {string} name\n     * @param {string} params As decoded from the query string, e.g. { sort: \"name\", filter: {enabled:true}, slice: [10, 20] }\n     */\n    getAll(name, params) {\n        return this.collections[name].getAll(params);\n    }\n\n    getOne(name, identifier, params) {\n        return this.collections[name].getOne(identifier, params);\n    }\n\n    addOne(name, item) {\n        if (!this.collections.hasOwnProperty(name)) {\n            this.addCollection(name, new Collection([], 'id'));\n        }\n        return this.collections[name].addOne(item);\n    }\n\n    updateOne(name, identifier, item) {\n        return this.collections[name].updateOne(identifier, item);\n    }\n\n    removeOne(name, identifier) {\n        return this.collections[name].removeOne(identifier);\n    }\n\n    getOnly(name, params) {\n        return this.singles[name].getOnly();\n    }\n\n    updateOnly(name, item) {\n        return this.singles[name].updateOnly(item);\n    }\n\n\n    decode(request) {\n        request.queryString = decodeURIComponent(request.url.slice(request.url.indexOf('?') + 1));\n        request.params = parseQueryString(request.queryString);\n        if (request.requestBody) {\n            try {\n                request.json = JSON.parse(request.requestBody);\n            } catch(error) {\n                // body isn't JSON, skipping\n            }\n        }\n        return this.requestInterceptors.reduce(function(previous, current) {\n            return current(previous);\n        }, request);\n    }\n\n    respond(body, headers, request, status=200) {\n        if (!headers) {\n            headers = {};\n        }\n        if (!headers['Content-Type']) {\n            headers['Content-Type'] = 'application/json';\n        }\n        let response = { status: status, headers: headers, body: body };\n        response = this.responseInterceptors.reduce(function(previous, current) {\n            return current(previous, request);\n        }, response);\n        this.log(request, response);\n\n        return request.respond(response.status, response.headers, JSON.stringify(response.body));\n    }\n\n    log(request, response) {\n        if (!this.loggingEnabled) return;\n        if (console.group) {\n            // Better logging in Chrome\n            console.groupCollapsed(request.method, request.url, '(FakeRest)');\n            console.group('request');\n            console.log(request.method, request.url);\n            console.log('headers', request.requestHeaders);\n            console.log('body   ', request.requestBody);\n            console.groupEnd();\n            console.group('response', response.status);\n            console.log('headers', response.headers);\n            console.log('body   ', response.body);\n            console.groupEnd();\n            console.groupEnd();\n        } else {\n            console.log('FakeRest request ', request.method, request.url, 'headers', request.requestHeaders, 'body', request.requestBody);\n            console.log('FakeRest response', response.status, 'headers', response.headers, 'body', response.body);\n        }\n    }\n\n    batch(request) {\n\n        var json = request.json;\n        var handle = this.handle.bind(this);\n\n        var jsonResponse = Object.keys(json).reduce(function (jsonResponse, requestName) {\n            var subResponse;\n            var sub = {\n                url: json[requestName],\n                method: 'GET',\n                params: {},\n                respond: function (code, headers, body) {\n                    subResponse = {\n                        code: code,\n                        headers: Object.keys(headers || {}).map(function (headerName) {\n                            return {\n                                'name': headerName,\n                                'value': headers[headerName]\n                            };\n                        }),\n                        body: body || {}\n                    };\n                }\n            };\n            handle(sub);\n\n            jsonResponse[requestName] = subResponse || {\n                code: 404,\n                headers: [],\n                body: {}\n            };\n\n            return jsonResponse;\n        }, {});\n\n        return this.respond(jsonResponse, {}, request, 200);\n    }\n\n    /**\n     * @param {FakeXMLHttpRequest} request\n     *\n     * String request.url The URL set on the request object.\n     * String request.method The request method as a string.\n     * Object request.requestHeaders An object of all request headers, i.e.:\n     *     {\n     *         \"Accept\": \"text/html\",\n     *         \"Connection\": \"keep-alive\"\n     *     }\n     * String request.requestBody The request body\n     * String request.username Username, if any.\n     * String request.password Password, if any.\n     */\n    handle(request) {\n        request = this.decode(request);\n\n        if (this.batchUrl && this.batchUrl === request.url && request.method === 'POST') {\n            return this.batch(request);\n        }\n\n        // Handle Single Objects\n        for (let name of this.getSingleNames()) {\n            let matches = request.url.match(new RegExp('^' + this.baseUrl + '\\\\/(' + name + ')(\\\\/?.*)?$' ));\n            if (!matches) continue;\n\n            if (request.method == 'GET') {\n                try {\n                    let item = this.getOnly(name);\n                    return this.respond(item, null, request);\n                } catch (error) {\n                    return request.respond(404);\n                }\n            }\n            if (request.method == 'PUT') {\n                try {\n                    let item = this.updateOnly(name, request.json);\n                    return this.respond(item, null, request);\n                } catch (error) {\n                    return request.respond(404);\n                }\n            }\n            if (request.method == 'PATCH') {\n               try {\n                    let item = this.updateOnly(name, request.json);\n                    return this.respond(item, null, request);\n                } catch (error) {\n                    return request.respond(404);\n                }\n            }\n        }\n\n        // Handle collections\n        let matches = request.url.match(new RegExp('^' + this.baseUrl + '\\\\/([^\\\\/?]+)(\\\\/(\\\\d+))?(\\\\?.*)?$' ));\n        if (!matches) return;\n        let name = matches[1];\n        let params = Object.assign({}, this.defaultQuery(name), request.params);\n        if (!matches[2]) {\n            if (request.method == 'GET') {\n                if (!this.getCollection(name)) {\n                    return;\n                }\n                let count = this.getCount(name, params.filter ? { filter: params.filter } : {});\n                let items, contentRange, status;\n                if (count > 0) {\n                    items = this.getAll(name, params);\n                    let first = params.range ? params.range[0] : 0;\n                    let last = params.range ? Math.min(items.length - 1 + first, params.range[1]) : (items.length - 1);\n                    contentRange = `items ${first}-${last}/${count}`;\n                    status = (items.length == count) ? 200 : 206;\n                } else {\n                    items = [];\n                    contentRange = 'items */0';\n                    status = 200;\n                }\n                return this.respond(items, { 'Content-Range': contentRange }, request, status);\n            }\n            if (request.method == 'POST') {\n                let newResource = this.addOne(name, request.json);\n                let newResourceURI = this.baseUrl + '/' + name + '/' + newResource[this.getCollection(name).identifierName];\n                return this.respond(newResource, { Location: newResourceURI }, request, 201);\n            }\n        } else {\n            if (!this.getCollection(name)) {\n                return;\n            }\n            let id = matches[3];\n            if (request.method == 'GET') {\n                try {\n                    let item = this.getOne(name, id, params);\n                    return this.respond(item, null, request);\n                } catch (error) {\n                    return request.respond(404);\n                }\n            }\n            if (request.method == 'PUT') {\n                try {\n                    let item = this.updateOne(name, id, request.json);\n                    return this.respond(item, null, request);\n                } catch (error) {\n                    return request.respond(404);\n                }\n            }\n            if (request.method == 'PATCH') {\n                try {\n                    let item = this.updateOne(name, id, request.json);\n                    return this.respond(item, null, request);\n                } catch (error) {\n                    return request.respond(404);\n                }\n            }\n            if (request.method == 'DELETE') {\n                try {\n                    let item = this.removeOne(name, id);\n                    return this.respond(item, null, request);\n                } catch (error) {\n                    return request.respond(404);\n                }\n            }\n        }\n    }\n\n    getHandler() {\n        return this.handle.bind(this);\n    }\n}\n","export class Single {\n    constructor(obj) {\n        if (!(obj instanceof Object)) {\n            throw new Error('Can\\'t initialize a Single with anything except an object');\n        }\n        this.obj = obj;\n        this.server = null;\n        this.name = null;\n    }\n\n    /**\n     * A Single may need to access other collections (e.g. for embedded\n     * references) This is done through a reference to the parent server.\n     */\n    setServer(server) {\n        this.server = server;\n    }\n\n    setName(name) {\n        this.name = name;\n    }\n\n    // No need to embed Singles, since they are by their nature top-level\n    // No need to worry about remote references, (i.e. mysingleton_id=1) since\n    // it is by definition a singleton\n    _oneToManyEmbedder(resourceName) {\n        return (item) => {\n            const otherCollection = this.server.collections[resourceName];\n            if (!otherCollection) throw new Error(`Can't embed a non-existing collection ${resourceName}`);\n            // We have an array of ids {posts: [1,2]} (back refs are not valid\n            // for singleton)\n            item[resourceName] = otherCollection.getAll({\n                filter: i => item[resourceName].indexOf(i[otherCollection.identifierName]) !== -1\n            });\n            return item;\n        };      \n    }\n\n    _manyToOneEmbedder(resourceName) {\n        const pluralResourceName = resourceName + 's';\n        const referenceName = resourceName + '_id';\n        return (item) => {\n            const otherCollection = this.server.collections[pluralResourceName];\n            if (!otherCollection) throw new Error(`Can't embed a non-existing collection ${resourceName}`);\n            try {\n                item[resourceName] = otherCollection.getOne(item[referenceName]);\n            } catch (e) {\n                // Resource doesn't exist, so don't embed\n            }\n            return item;\n        };\n    }\n\n    _itemEmbedder(embed) {\n        const resourceNames = Array.isArray(embed) ? embed : [embed];\n        const resourceEmbedders = resourceNames.map(resourceName =>\n           resourceName.endsWith('s') ? this._oneToManyEmbedder(resourceName) : this._manyToOneEmbedder(resourceName)\n        );\n        return item => resourceEmbedders.reduce((itemWithEmbeds, embedder) => embedder(itemWithEmbeds), item);\n    }\n\n    getOnly(query) {\n        let item = this.obj;\n        if (query && query.embed && this.server) {\n            item = Object.assign({}, item); // Clone\n            item = this._itemEmbedder(query.embed)(item);\n        }\n        return item;\n    }\n\n    updateOnly(item) {\n        for (let key in item) {\n            this.obj[key] = item[key];\n        }\n        return this.obj;\n    }\n}\n","export function parseQueryString(queryString) {\n    if (!queryString) {\n        return {};\n    }\n    let queryObject = {};\n    let queryElements = queryString.split('&');\n\n    queryElements.map(function(queryElement) {\n        if (queryElement.indexOf('=') === -1) {\n            queryObject[queryElement] = true;\n        } else {\n            let [key, value] = queryElement.split('=');\n            if (value.indexOf('[') === 0 || value.indexOf('{') === 0) {\n                value = JSON.parse(value);\n            }\n            queryObject[key.trim()] = value;\n        }\n    });\n\n    return queryObject;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(\"./src/FakeRest.js\");\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"sourceRoot":""}